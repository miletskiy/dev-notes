{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Commands free -h scp -r centos@10.10.54.18:/etc/nginx/conf.d hostnamectl sudo killall -HUP mDNSResponder ps -fA | grep flask Postgres SQL https://gist.github.com/Kartones/dd3ff5ec5ea238d4c546 \\du List of roles \\c db_name Connect to the db \\dt List of tables \\l List of databases createuser dependents_service_user -W -S -e -l -R -P -D -U miletskiy createuser dependents_service_user -W -S -e -l -R -P -d -U miletskiy (create db) createdb -e -E utf8 -O dependents_service_user -U miletskiy -W dependents_service_db Db_for_Dependents CREATE ROLE stats_service_user NOSUPERUSER CREATEDB NOCREATEROLE INHERIT LOGIN; ALTER USER stats_service_user WITH PASSWORD 's3cr3t'; CREATE DATABASE stats_service_db OWNER stats_service_user ENCODING 'utf8'; DROP DATABASE IF EXISTS test_prescriptions_service_db; ALTER USER ind_service_user WITH CREATEDB; or: ALTER ROLE dependents_service_user with CREATEDB; export PGPASSWORD='L3@n_Postgre_SU#' export PGUSER='postgres' unset PGPASSWORD REVOKE CONNECT ON DATABASE vital_signs_service_db FROM public; SELECT pid, pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = 'vital_signs_service_db' AND pid <> pg_backend_pid(); GRANT CONNECT ON DATABASE vital_signs_service_db TO public; pg_restore --verbose --clean --no-acl --no-owner --host=localhost --dbname=vital_signs_service_db --username=vital_signs_service_user dump_vs.sql Django python manage.py startapp pharmacy -v 3 # New app verbose mode python manage.py makemigrations core --name privacy_policy # Create a named migration for one app python manage.py migrate core 0005 # Migrate to specific migration python manage.py migrate core zero # Back to the initial DB state python manage.py showmigrations profiles # Show information about migrations python manage.py createsuperuser smiletskyi smiletskyi@intellias.com p@ssw0rd Flask flask db init # Initiation flask db migrate --message 'District model' flask db upgrade flask db history # Show information about migrations driver = 'postgresql' username = 'vs_service_user' password = 's3cr3t_p@ss' host = 'localhost' port = '5432' db_name = 'vs_service_db' SQLALCHEMY_DATABASE_URI = f'{driver}://{username}:{password}@{host}:{port}/{db_name}' Links Connect to a VPN from the Command Line on Mac OS Linux: systemctl \u2014 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043b\u0443\u0436\u0431\u0430\u043c\u0438 Kubernetes kubectl --kubeconfig ~/Data/Intellias/keys/kube/unified describe pod vital-signs-service-production kubectl --kubeconfig ~/Data/Intellias/keys/kube/unified logs individual-service-production-b66cd84c-cd7fv --since=5m -f watch \"kubectl --kubeconfig ~/Data/Intellias/keys/kube/unified get pod -o wide | grep indi\" kubectl --kubeconfig ~/Data/Intellias/keys/kube/unified cp scripts/migrate.py vital-signs-service-production-support-6bf69c5585-g5wtm:/app/migrate.py","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#commands_1","text":"free -h scp -r centos@10.10.54.18:/etc/nginx/conf.d hostnamectl sudo killall -HUP mDNSResponder ps -fA | grep flask","title":"Commands"},{"location":"#postgres-sql","text":"https://gist.github.com/Kartones/dd3ff5ec5ea238d4c546 \\du List of roles \\c db_name Connect to the db \\dt List of tables \\l List of databases createuser dependents_service_user -W -S -e -l -R -P -D -U miletskiy createuser dependents_service_user -W -S -e -l -R -P -d -U miletskiy (create db) createdb -e -E utf8 -O dependents_service_user -U miletskiy -W dependents_service_db Db_for_Dependents CREATE ROLE stats_service_user NOSUPERUSER CREATEDB NOCREATEROLE INHERIT LOGIN; ALTER USER stats_service_user WITH PASSWORD 's3cr3t'; CREATE DATABASE stats_service_db OWNER stats_service_user ENCODING 'utf8'; DROP DATABASE IF EXISTS test_prescriptions_service_db; ALTER USER ind_service_user WITH CREATEDB; or: ALTER ROLE dependents_service_user with CREATEDB; export PGPASSWORD='L3@n_Postgre_SU#' export PGUSER='postgres' unset PGPASSWORD REVOKE CONNECT ON DATABASE vital_signs_service_db FROM public; SELECT pid, pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = 'vital_signs_service_db' AND pid <> pg_backend_pid(); GRANT CONNECT ON DATABASE vital_signs_service_db TO public; pg_restore --verbose --clean --no-acl --no-owner --host=localhost --dbname=vital_signs_service_db --username=vital_signs_service_user dump_vs.sql","title":"Postgres SQL"},{"location":"#django","text":"python manage.py startapp pharmacy -v 3 # New app verbose mode python manage.py makemigrations core --name privacy_policy # Create a named migration for one app python manage.py migrate core 0005 # Migrate to specific migration python manage.py migrate core zero # Back to the initial DB state python manage.py showmigrations profiles # Show information about migrations python manage.py createsuperuser smiletskyi smiletskyi@intellias.com p@ssw0rd","title":"Django"},{"location":"#flask","text":"flask db init # Initiation flask db migrate --message 'District model' flask db upgrade flask db history # Show information about migrations driver = 'postgresql' username = 'vs_service_user' password = 's3cr3t_p@ss' host = 'localhost' port = '5432' db_name = 'vs_service_db' SQLALCHEMY_DATABASE_URI = f'{driver}://{username}:{password}@{host}:{port}/{db_name}'","title":"Flask"},{"location":"#links","text":"Connect to a VPN from the Command Line on Mac OS Linux: systemctl \u2014 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043b\u0443\u0436\u0431\u0430\u043c\u0438","title":"Links"},{"location":"#kubernetes","text":"kubectl --kubeconfig ~/Data/Intellias/keys/kube/unified describe pod vital-signs-service-production kubectl --kubeconfig ~/Data/Intellias/keys/kube/unified logs individual-service-production-b66cd84c-cd7fv --since=5m -f watch \"kubectl --kubeconfig ~/Data/Intellias/keys/kube/unified get pod -o wide | grep indi\" kubectl --kubeconfig ~/Data/Intellias/keys/kube/unified cp scripts/migrate.py vital-signs-service-production-support-6bf69c5585-g5wtm:/app/migrate.py","title":"Kubernetes"}]}